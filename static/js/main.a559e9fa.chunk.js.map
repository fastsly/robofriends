{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","loading","filteredRobots","this","filter","robot","toLocaleLowerCase","includes","length","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAXF,SAACC,GACV,OACI,yBAAKC,UAAU,yDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,mBACrB,6BACI,4BAAKJ,EAAMK,MACX,uBAAGJ,UAAU,WAAWD,EAAMM,UCK/BC,EAVE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACTC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAC/B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAElF,OACI,yBAAKL,UAAU,MAAMG,GAAG,SACnBK,ICKEK,EAbG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAChB,OACI,yBAAKd,UAAU,OACX,2BACIA,UAAW,oCACXe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAkBC,OAAQ,UAC7DvB,EAAMwB,WCuCJC,G,wDAnCX,aAAc,IAAD,8BACT,gBAWJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAXzC,EAAKC,MAAO,CACRxB,OAAO,GACPqB,YAAa,IAJR,E,gEAOO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACpB,OAAQ6B,S,+BAK/B,IAIDC,EAJA,OACEC,EAAiBC,KAAKR,MAAMxB,OAAOiC,QAAO,SAAAC,GAC5C,OAAOA,EAAMrC,KAAKsC,oBAAoBC,SAAS,EAAKZ,MAAMH,YAAYc,wBAS1E,OAJIL,EAFHE,KAAKR,MAAMxB,OAAOqC,OAGX,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUrC,OAAQ+B,KAHhB,wBAAItC,UAAU,MAAd,cAMV,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAcyB,KAAKd,iBAC7BY,O,GA/BCQ,IAAMC,YCDxBC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SNwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a559e9fa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport '../index.css'\r\n\r\nconst Card = (props) =>{\r\n    return (\r\n        <div className='bg-light-green nav_item br3 pa3 ma2 grow bw2 shadow-5' >\r\n            <img alt='robots' src={`https://robohash.org/${props.id}?size=200x200`} />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p className='ma1 mb2'>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card.js'\r\nimport '../index.css'\r\n\r\nconst CardList = ({robots})=>{\r\n    const cardArray = robots.map((user,i) =>{\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n    return (\r\n        <div className='nav' id='cards'>\r\n            {cardArray}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className= 'pa3 ba b--green bg-lightest-blue '\r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflow: 'scroll', border:'1px solid black',height: '700px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            robots:[],\r\n            searchField: '',\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots: users}))\r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robot =>{\r\n            return robot.name.toLocaleLowerCase().includes(this.state.searchField.toLocaleLowerCase())\r\n        })\r\n        let loading\r\n        !this.state.robots.length?\r\n            loading = <h1 className='f1'>Loading...</h1>:        \r\n            loading = \r\n                <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                {loading}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App'\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App/>,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}